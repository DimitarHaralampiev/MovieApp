# from django.core.exceptions import PermissionDenied
# from django.contrib import messages
# from django.http import HttpResponseForbidden
# from django.template import loader
#
#
# class CustomPermissionDeniedMiddleware:
#     """
#     Middleware for handling PermissionDenied exceptions and providing a custom response.
#
#     This middleware intercepts PermissionDenied exceptions raised during request processing.
#     If a PermissionDenied exception is encountered, it adds an error message to the user's
#     messages and returns an HTTP response indicating that the user does not have permission
#     to perform the requested action.
#
#     Usage:
#     1. Add 'path.to.CustomPermissionDeniedMiddleware' to the MIDDLEWARE setting in your Django project settings.
#     2. Ensure the middleware is placed before Django's CommonMiddleware to handle exceptions early.
#
#     Example:
#     ```python
#     MIDDLEWARE = [
#         # ...
#         'path.to.CustomPermissionDeniedMiddleware',
#         'django.middleware.common.CommonMiddleware',
#         # ...
#     ]
#     ```
#
#     Attributes:
#         get_response (callable): The next middleware or view function in the request/response chain.
#     """
#
#     def __init__(self, get_response):
#         """
#         Initialize the middleware.
#
#         Args:
#             get_response (callable): The next middleware or view function in the request/response chain.
#         """
#         self.get_response = get_response
#
#     def __call__(self, request):
#         """
#         Process the request and call the next middleware or view function in the chain.
#
#         Args:
#             request (HttpRequest): The incoming HTTP request.
#
#         Returns:
#             HttpResponse: The HTTP response generated by the next middleware or view function.
#         """
#         response = self.get_response(request)
#         return response
#
#     def process_exception(self, request, exception):
#         """
#         Handle exceptions raised during request processing.
#
#         If a PermissionDenied exception is encountered, add an error message to the user's
#         messages and return an HTTP response indicating lack of permission.
#
#         Args:
#             request (HttpRequest): The incoming HTTP request.
#             exception (Exception): The exception raised during request processing.
#
#         Returns:
#             HttpResponse: An HTTP response indicating lack of permission, or None if the exception is not a PermissionDenied.
#         """
#         if isinstance(exception, PermissionDenied):
#             error_message = "You do not have permission to perform this action."
#             messages.error(request, error_message)
#
#             # Render the HTML template
#             template = loader.get_template('middleware.html')
#             context = {'error_message': error_message}
#             return HttpResponseForbidden(template.render(context))